class window.ExperimentDesigner

    constructor: (@inputSpace) ->
        @doeGroups = []
        @rangeParameters = []
        @nextId = 0

        document.addEventListener("parametrizationTypeChange", @parametrizationTypeChangeListener, false)
        $("body").delegate("#experiment_submit_form", "submit", @updateDoeForSubmit)


    parametrizationTypeChangeListener: (event) =>
        parameterId = [event.detail.entityGroupId, event.detail.entityId, event.detail.parameterId].filter(
                (n) -> n != undefined && n != ""
        ).join("___")

        if event.detail.parametrizationType == "range"
            @addRangeParameter(event.detail.entityGroupId, event.detail.entityId, event.detail.parameterId)

        else
            # remove already parameter if already chosen
            $("[id^='doe-group-'] li.bullet-item").each (index, bulletItem) =>
                if $(bulletItem).is("[param_id]") and ($(bulletItem).attr('param_id') == parameterId)
                    $(bulletItem).find("a.button").click()
            # remove the parameter from the parameter list
            @removeRangeParameter(parameterId)

        @updateSelectElements()

    # updating all select elements with parameters
    updateSelectElements: () =>
        $("[id^='doe-group-']").each (_, doeGroup) =>
            @addParameterSelectorToGroup($(doeGroup).attr('id'))

    addParameterSelectorToGroup: (doeGroupId) =>
        selectElement = $("##{doeGroupId} select#parameters").html('')

        for p in @rangeParameters
            parameterLabel = ""
            parameterLabel += p.entityGroup['label'] + " - " if p.entityGroup['label'] != undefined
            parameterLabel += p.entity['label'] + " - " if p.entity['label'] != undefined
            parameterLabel += p.parameter['label']

#            {p.entityGroup['label']} - #{p.entity['label']} - #{p.parameter['label']}"
            option = $("<option value='#{p.fullId}'>#{parameterLabel}</option>")
            selectElement.append(option)

        # disable button if there is no options
        if selectElement.html() == ''
            $('#' + doeGroupId + " select#parameters").hide()
            $('#' + doeGroupId + " .price span.button").hide()
        else # enable otherwise
            $('#' + doeGroupId + " select#parameters").show()
            $('#' + doeGroupId + " .price span.button").show()

    createDoeGroup: (selectId) =>
        select = $('#' + selectId)

        doe_label = select.find("option[value='" + select.val() + "']").html()
        doe_id = select.val()

        group = $('#doe-group-template').clone()

        group.find('li.title').html(doe_label)
        group.attr('id', 'doe-group-' + @nextId)
        group.attr('doe-id', doe_id)
        group.find('.add-parameter-btn').click (event) =>
            @addParameterToGroup($(event.currentTarget).closest('ul'))
        group.find('.delete-group-btn').click (event) =>
            @deleteGroup($(event.currentTarget).closest('ul'))

        $("div.content[data-slug='doe']").append(group)
        @addParameterSelectorToGroup('doe-group-' + @nextId)
        group.show()

        @nextId += 1


    addParameterToGroup: (groupElement) =>
        select = groupElement.find('select#parameters')
        param_label = select.find("option[value='" + select.val() + "']").html()
        param_id = select.val()

        # button removing this parameter from its group
        deleteButton = $("<a href='#'></a>").addClass("button radius").on 'click', (event) =>
            $button = $(event.currentTarget)
            # get parameter id to remove
            parameterId = $button.closest('li').attr('param_id')
            @addRangeParameter(parameterId)
            # update other select element
            @updateSelectElements()
            # remove the row describing parameter
            $button.closest('li').remove()
            # prevent from reloading
            false

        deleteButton.html("<%= I18n.t('simulations.conduct.doe.remove_parameter') %>")
        # parameter label
        content = $("<label></label>").css('margin-bottom', '5px').html(param_label)
        # row describing the parameter
        paramElement = $("<li></li>").addClass('bullet-item').attr('param_id',
                param_id).append(content).append(deleteButton)

        # append this parameter row
        groupElement.find('li.price').after(paramElement)
        # remove parameter id from range parameter list
        @removeRangeParameter(param_id)
        #update select elements
        @updateSelectElements()


    deleteGroup: (groupElement) =>
        groupElement.find(".bullet-item a.button").click()
        groupElement.remove()


    updateDoeForSubmit: () =>
        doeTab = []

        $("[id^='doe-group-']").each (index, doeGroup) =>
            doeId = $(doeGroup).attr('doe-id')

            if(doeId != undefined)
                parameters = []

                $(doeGroup).find('li.bullet-item').each (i, parameterBullet) =>
                    parameters.push($(parameterBullet).attr('param_id'))

                doeTab.push([ doeId, parameters ])

        $("input[name='doe']").val(JSON.stringify(doeTab))
        $("#doe").val(JSON.stringify(doeTab))


    checkExperimentSize: () =>
        @inputSpace.updateAllInputParameterValues()
        @updateDoeForSubmit()

        $.ajax
            type: "POST",
            url: $('#calculate-experiment-size-url').val(),
            data:
                simulation_id: $('#simulation_id').val()
                experiment_input: $('#experiment_input').val()
                doe: $('#doe').val()
                replication_level: $('#replication_level').val()
                parameters_constraints: $('#parameters_constraints').val()
            beforeSend: (xhr) =>
                $('#conduct-loading').show()
            success: (msg) =>
                $('#conduct-loading').hide()
                $("#experiment-size-dialog #calculated-experiment-size").html(msg.experiment_size)

                if(msg.error != undefined and msg.error != null)
                    toastr.error(msg.error)
                else
                    $('#experiment-size-dialog').foundation('reveal', 'open')
            error: (msg) ->
                toastr.error(msg)
                $('#conduct-loading').hide()

        return false


    # add a parameter to the internal range parameter list
    addRangeParameter: (entityGroupId, entityId, parameterId) =>
        if entityId == undefined && parameterId == undefined
            fullParameterId = entityGroupId
            id_info = entityGroupId.split('___')

            parameterId = id_info[id_info.length - 1]
            entityId = id_info[id_info.length - 2]
            entityGroupId = id_info[id_info.length - 3]
        else
            fullParameterId = parameterId
            fullParameterId = "#{entityId}___#{fullParameterId}" if entityId != undefined && entityId != ""
            fullParameterId = "#{entityGroupId}___#{fullParameterId}" if entityGroupId != undefined && entityGroupId != ""

        parameter = InputSpace.getParameter(entityGroupId, entityId, parameterId)

        @rangeParameters.push(
            fullId: fullParameterId
            entityGroup: parameter.entityGroup
            entity: parameter.entity
            parameter: parameter.parameter
        )

    # remove the parameter from the internal range parameter list
    removeRangeParameter: (fullParameterId) =>
#        console.log "Removing: #{fullParameterId}"
        index = -1
        for parameter, i in @rangeParameters
#            console.log "#{parameter.fullId} --- #{parameter.fullId == fullParameterId}"
            if parameter.fullId == fullParameterId
                index = i
        @rangeParameters.splice(index, 1) if index >= 0