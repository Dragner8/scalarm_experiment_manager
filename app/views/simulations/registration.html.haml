- content_for :title, t('.title')
- content_for :help, raw(t('help.simulations.register'))

%section.panel.radius
  %h3.subheader= t('.experiments_label')

  .content
    = form_tag(simulations_path, id: 'scenario_form', multipart: true, class: 'custom', "data-abide" => '')  do
      .row
        %fieldset
          %legend= t("simulations.registration.basic_information")
          .row
            .small-3.columns
              %label.right.inline{for: 'simulation_name'}= t("simulations.registration.simulation_name")
            .small-9.columns
              = text_field_tag 'simulation_name', '', style: 'max-width: 100%;' , required: 'true', pattern:"^[\\w-]+$"
              %small(class="error") Invalid simulation name - only letters, digits, '-' and '_'
          .row
            .small-3.columns
              %label.right.inline{for: 'simulation_description'}= t("simulations.registration.simulation_description")
            .small-9.columns
              = text_area_tag 'simulation_description', '', rows: 2, style: 'max-width: 100%;'

      = render partial: 'input_definition_editor'

      .row
        %fieldset#simulation-files
          %legend= t('simulations.registration.files')
          .row
            .row
              .small-10.columns.small-centered
                %fieldset
                  %legend= t("simulations.registration.simulation_binaries")
                  .row
                    .small-5.columns
                      %label.right.inline{for: 'simulation_binaries'}= t("simulations.registration.simulation_binaries_desc") + ':'
                    .small-7.columns
                      = file_field_tag 'simulation_binaries'

            .row
              = render partial: 'form_row', object: 'input_writer',
                locals: { input_element: select_tag('input_writer_id', options_for_select(@input_writers.unshift(["None", nil])), class: 'medium') }
              = render partial: 'form_row', object: 'executor',
                locals: { input_element: select_tag('executor_id', options_for_select(@executors.unshift(["None", nil])), class: 'medium') }
            .row
              = render partial: 'form_row', object: 'output_reader',
                locals: { input_element: select_tag('output_reader_id', options_for_select(@output_readers.unshift(["None", nil])), class: 'medium') }
              = render partial: 'form_row', object: 'progress_monitor',
                locals: { input_element: select_tag('progress_monitor_id', options_for_select(@progress_monitors.unshift(["None", nil])), class: 'medium') }

          .row
            .small-2.small-centered.columns
              = submit_tag t('.upload'), class: 'button expand radius last-element'

      #invalid-form.reveal-modal.small{'data-reveal' => true}
        .row{style: "margin-bottom: 25px;"}
          .small-12.columns
            = 'Some fields has invalid values '
        .row
          .small-12.columns.text-center
            %a#invalid-ok.button.radius.medium= 'OK'

%section.panel.radius.last-element
  %h3.subheader= t('.component_registration_title')

  .content
    = form_tag(simulations_upload_component_path, :multipart => true) do
      .row
        .small-3.columns= label_tag :component_name, t('.component_name') + ':', class: 'inline right'
        .small-6.columns= text_field_tag 'component_name'
        .small-3.columns

      .row
        .small-3.columns= label_tag :component_code, t('.component_code') + ':', class: 'inline right'
        .small-6.columns= file_field_tag 'component_code'
        .small-3.columns

      .row
        .small-3.columns= label_tag :component_type, t('.component_type') + ':', class: 'inline right'
        .small-6.columns= select_tag('component_type', adapter_types, class: 'medium')
        .small-3.columns


      .row
        .small-2.small-centered.columns
          = submit_tag t('.upload'), class: 'button expand radius last-element'

- content_for :javascript do
  :javascript
    $(function() {
      window.toggle_panels_on_title_click();

      $("#scenario_form")
        .on('valid.fndtn.abide', function(){

          $('.last-element h3:first').click();
        })
        .on('invalid.fndtn.abide', function(){
          $(this).find('[data-invalid]').blur();
          $('#invalid-form').foundation('reveal', 'open');
        });
      $("#invalid-ok").bind("click", function() {
        $('#invalid-form').foundation('reveal', 'close');
        $('html, body').animate({
          scrollTop: $("#scenario_form").offset().top
        }, 2000);});

      window.scenario_registration = new window.ScenarioRegistration();

    });
