%h2= t('infrastructure.tree.sm_dialog.header')

%a.close-reveal-modal &#215;

#destroy_simulation_manager_dialog.reveal-modal(data-reveal="")
  %h2= t('.destroy_dialog.header')
  .row
    .small-6.columns.centered
      = link_to t('yes'),simulation_manager_command_infrastructure_path(  |
        command: 'stop', record_id: record.id, infrastructure_name: facade.short_name), |
        id: 'destroy-yes', class: button_classes, method: :post, remote: true |
    .small-6.columns.centered
      %span.no_button{class: button_classes}= t('no')

- begin
  %h3= t('.resource_header', resource_id: record.resource_id, facade_name: facade.long_name)

  .row.small-12.columns
    .small-2.columns.action-button#restart_simulation_manager_button
      = link_to raw('<i class="fi-refresh"/>&nbsp;&nbsp;&nbsp;') + t('.restart'), |
        simulation_manager_command_infrastructure_path(  |
        command: 'restart', record_id: record.id, infrastructure_name: facade.short_name), |
        class: button_classes, method: :post, remote: true |

    .small-2.columns.action-button#destroy_simulation_manager_button
      %span#destroyExperimentButton{class: "#{button_classes} alert"}
        %i.fi-stop
        = raw '&nbsp;&nbsp;&nbsp;'
        = t('.stop')
    .small-8.columns

  .row.small-12.columns
    %ul
      %li
        %strong= t('.resource_state') + ': '
        - begin
          - facade.yield_simulation_manager(record) do |sm|
            = t(".resource_states.#{sm.resource_status.to_s}", default: t('.resource_states.unknown', state: sm.resource_status.to_s))
          -#TODO: delete? yield should not throw an exception
        - rescue Exception => error
          =t('.resource_state_error', error: error.to_s)

      -# infrastructure-specific info
      -begin
        = render partial: "infrastructures/scheduler/simulation_managers_info/#{partial_name}", locals: {record: record}
      -rescue ActionView::MissingTemplate => exc
        = exc.to_s
        -# ignore if not found

      -# general record info
      - record_state = case record.state
        - when :error then t('infrastructures.sm_dialog.state.error')
        - when :initialized then t('infrastructures.sm_dialog.state.initialized')
        - when :before_init then t('infrastructures.sm_dialog.state.not_initialized')
        - else t('infrastructures.sm_dialog.state.unknown')
      %li
        %strong= t('infrastructures.sm_dialog.simulation_manager_state') + ': '
        =record_state
      - if record.state == :error
        %ul
          %li
            %strong= t('infrastructures.sm_dialog.error_message') + ': '
            = t('infrastructure.information.sm_info.errors.'+record.error, default: record.error)
            - unless record.error_log.nil?
              %li
                %strong= t('infrastructure.information.sm_info.error_log') + ': '
                %br
                = raw(record.error_log.sub("\n", '<br/>'))
      - elsif record.state == :initialized
        %li
          %strong= t('infrastructures.sm_dialog.sm_initialized_at') + ':'
          =record.sm_initialized_at.to_s
      %li
        %strong= t('infrastructures.sm_dialog.created_at') + ': '
        =record.created_at.strftime('%Y-%m-%d %H:%M:%S')
      %li
        %strong= t('infrastructures.sm_dialog.time_limit') + ': '
        =record.created_at.since(record.time_limit.to_i.minutes).to_s + ' ' + "(#{record.time_limit.to_s} minutes)"
      %li
        %strong= t('infrastructures.sm_dialog.experiment') + ': '
        = link_to "#{record.experiment.name}", experiment_path(record.experiment_id)



- rescue Exception => e
  =t('infrastructure.information.sm_record_error', error: e.to_s)

:javascript
  $(function() {
    $(document).foundation();

    new window.SmDialog("#dialog");
  });